import boto3
import json
import logging
import os
#JN Added
import urllib

from base64 import b64decode
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError

# The base-64 encoded, encrypted key (CiphertextBlob) stored in the kmsEncryptedHookUrl environment variable
ENCRYPTED_HOOK_URL = os.environ['kmsEncryptedHookUrl']
# The Slack channel to send a message to stored in the slackChannel environment variable
SLACK_CHANNEL = os.environ['slackChannel']

HOOK_URL = "https://" + boto3.client('kms').decrypt(
    CiphertextBlob=b64decode(ENCRYPTED_HOOK_URL),
    EncryptionContext={'LambdaFunctionName': os.environ['AWS_LAMBDA_FUNCTION_NAME']}
)['Plaintext'].decode('utf-8')

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    print("Event received by Lambda function: " + json.dumps(event))
    logger.info("Event: " + json.dumps(event))
    message = json.dumps(event['Records'][0])
    logger.info("Message: " + str(message))

    bucket_name = json.dumps(event['Records'][0]['s3']['bucket']['name'])
    key = urllib.parse.unquote_plus(json.dumps(event['Records'][0]['s3']['object']['key']))
    logger.info("Bucket Name: " + bucket_name)
    
    slack_message = {
        'channel': SLACK_CHANNEL,
        'text': "The file \"%s\" has been moved from the \"%s\" s3 bucket to the 'agn2-lre-summary-s3-processed' s3 bucket for archiving" % (key, bucket_name)
    }

    req = Request(HOOK_URL, json.dumps(slack_message).encode('utf-8'))
    try:
        response = urlopen(req)
        response.read()
        logger.info("Message posted to %s", slack_message['channel'])
    except HTTPError as e:
        logger.error("Request failed: %d %s", e.code, e.reason)
    except URLError as e:
        logger.error("Server connection failed: %s", e.reason)
